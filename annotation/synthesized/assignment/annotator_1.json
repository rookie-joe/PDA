[
    {
        "formal": null,
        "nl_statement": "Completely factor the following expression: \\[(6a^3+92a^2-7)-(-7a^3+a^2-7)\\]",
        "nl_proof": "First, we combine like terms in the expression: \\begin{align*}\n&(6a^3+92a^2-7)-(-7a^3+a^2-7)\\\\\n& \\qquad=6a^3+92a^2-7+7a^3-a^2+7\\\\\n&\\qquad=13a^3+91a^2.\n\\end{align*}We can factor out a $13a^2$ from the expression, to get \\[13a^3+91a^2=\\boxed{13a^2(a+7)}.\\]\nThe answer is 13a^2(a+7)\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem factor_quadratic_add_cubic : (6 * a ^ 3 + 92 * a ^ 2 - 7) - (-7 * a ^ 3 + a ^ 2 - 7) = 13 * a ^ 2 * (a + 7) := by\n   ring\n ",
        "source": "math",
        "uuid": "3139d32c-93cd-59bf-5c94-1cf0dc98d2c1",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": null,
        "nl_statement": "A certain regular tetrahedron has three of its vertices at the points $(0,1,2),$ $(4,2,1),$ and $(3,1,5).$  Find the coordinates of the fourth vertex, given that they are also all integers.",
        "nl_proof": "The side length of the regular tetrahedron is the distance between $(0,1,2)$ and $(4,2,1),$ which is\n\\[\\sqrt{(0 - 4)^2 + (1 - 2)^2 + (2 - 1)^2} = \\sqrt{18} = 3 \\sqrt{2}.\\]So if $(x,y,z)$ is the fourth vertex, with integer coordinates, then\n\\begin{align*}\nx^2 + (y - 1)^2 + (z - 2)^2 &= 18, \\\\\n(x - 4)^2 + (y - 2)^2 + (z - 1)^2 &= 18, \\\\\n(x - 3)^2 + (y - 1)^2 + (z - 5)^2 &= 18.\n\\end{align*}Subtracting the first and third equations, we get $6x + 6z - 30 = 0$, so $x + z = 5,$ which means $z = 5 - x.$  Subtracting the first and second equation, we get $8x + 2y - 2z - 16 = 0,$ so\n\\[y = z - 4x + 8 = (5 - x) - 4x + 8 = 13 - 5x.\\]Substituting into the first equation, we get\n\\[x^2 + (12 - 5x)^2 + (3 - x)^2 = 18.\\]This simplifies to $27x^2 - 126x + 135 = 0,$ which factors as $9(x - 3)(3x - 5) = 0.$  Since $x$ is an integer, $x = 3.$  Then $y = -2$ and $z = 2.$  Thus, the fourth vertex is $\\boxed{(3,-2,2)}.$\nThe answer is (3,-2,2)\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem fourth_vert : (0 : ℤ) = -4 * (3 : ℤ) := by norm_num\n ",
        "source": "math",
        "uuid": "956269f0-e5d7-b875-6dad-d6c795a76d79",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": null,
        "nl_statement": "If $a$ is a constant such that $9x^2 + 24x + a$ is the square of a binomial, then what is $a$?",
        "nl_proof": "If $9x^2 +24x + a$ is the square of a binomial, then the binomial has the form $3x +b$ for some number $b$, because $(3x)^2 = 9x^2$.  So, we compare $(3x+b)^2$ to $9x^2 + 24x + a$. Expanding $(3x+b)^2$ gives \\[(3x+b)^2 = (3x)^2 + 2(3x)(b) + b^2 = 9x^2 + 6bx + b^2.\\]Equating the linear term of this to the linear term of $9x^2+24x+a$, we have $6bx=24x$, so $b=4$.  Equating the constant term of $9x^2 + 6bx + b^2$ to that of $9x^2 + 24x+a$ gives us $a=b^2 = \\boxed{16}$.\nThe answer is 16\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem isSquare_eq_16 : IsSquare a ↔ a = 16 := by\n   rw [isSquare_iff_exists_linear_eq_sq, ← sq_linear_eq_sq_iff']\n   set_option tactic.skipAssignedInstances false in norm_num\n   rw [mul_comm, mul_assoc]\n   exact mul_right_cancel₀ (mul_ne_zero 3 3)\n ",
        "source": "math",
        "uuid": "1a2a73ed-562b-0f79-c374-59eef50bea63",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": null,
        "nl_statement": "Simplify the fraction $\\dfrac{88}{7744}.$",
        "nl_proof": "Since $88$ and $7744$ share a common factor of $88$, we can simplify $$\\dfrac{88}{7744}=\\dfrac{1 \\cdot 88}{88 \\cdot 88} = \\dfrac{1 \\cdot \\cancel{88}}{88 \\cdot \\cancel{88}} = \\boxed{\\dfrac{1}{88}}.$$\nThe answer is \\dfrac{1}{88}\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem one_div_eighty_eight : 88 / 7744 = 1 / 88 := by simp\n ",
        "source": "math",
        "uuid": "759cde66-bacf-b3d0-0b1f-9163ce9ff57f",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem measurable_exp : Measurable exp :=\n  continuous_exp.measurable\n",
        "nl_statement": "Prove that the exponential function is measurable.",
        "nl_proof": "We know that the exponential function (`exp`) is a continuous function. Additionally, a fundamental property of continuous functions is that they are always measurable. Therefore, we can directly conclude that the exponential function (`exp`) is measurable.\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem measurable_exp : Measurable exp :=\n   continuous_exp.measurable\n ",
        "source": "lean_basic",
        "uuid": "beb79919-3f22-faf8-23be-d01d43cf2fde",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": null,
        "nl_statement": "Express eleven in base 2.",
        "nl_proof": "We have $11=1\\cdot 2^3 + 0 \\cdot 2^2 + 1\\cdot 2^1 + 1\\cdot 2^0,$ so $11=\\boxed{1011_2}$.\nThe answer is 1011_2\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem eleven_as_bit_vector : (11 : ℕ) = 0b1011 := by rfl\n ",
        "source": "math",
        "uuid": "e2acf72f-9e57-4f7a-a0ee-89aed453dd32",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem parallelPair_obj_zero (f g : X ⟶ Y) : (parallelPair f g).obj zero = X := rfl\n ",
        "nl_statement": "Let's say we have two functions, `f` and `g`, both of which map elements from a set `X` to a set `Y`. We then construct a new function, called `parallelPair f g`, which takes a pair of elements from `X` and applies `f` to the first element and `g` to the second element. Prove that applying this new function to a special pair, where both elements are the 'zero' element of `X`, results in the set `X` itself.",
        "nl_proof": "1. By definition, applying `parallelPair f g` to the pair `(zero, zero)` means we apply `f` to the first `zero` and `g` to the second `zero`. \n2. However, since both `f` and `g` map from `X` to `Y`, applying them to an element of `X` (in this case, `zero`) will still result in something related to `X`, even if the output is in `Y`.\n3. Therefore, the result of `(parallelPair f g).obj zero` is inherently tied to the structure of `X` due to the domain of `f` and `g`.\n4. Since the statement is fundamentally true by the definition of the function and its input, we can conclude using `rfl` that `(parallelPair f g).obj zero = X`.\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem parallelPair_zero (f g : X ⟶ Y) : (parallelPair f g).obj zero = X :=\n   rfl\n ",
        "source": "lean_random",
        "uuid": "aefcfad8-efc8-9849-b3aa-7efe4458a885",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": null,
        "nl_statement": "Let $a,$ $b,$ $c,$ $d$ be nonzero integers such that\n\\[\\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}^2 = \\begin{pmatrix} 7 & 0 \\\\ 0 & 7 \\end{pmatrix}.\\]Find the smallest possible value of $|a| + |b| + |c| + |d|.$",
        "nl_proof": "We have that\n\\[\\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}^2 = \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix} \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix} = \\begin{pmatrix} a^2 + bc & ab + bd \\\\ ac + cd & bc + d^2 \\end{pmatrix},\\]so $a^2 + bc = bc + d^2 = 7$ and $ab + bd = ac + cd = 0.$  Then $b(a + d) = c(a + d) = 0.$  Since $b$ and $c$ are nonzero, $a + d = 0.$\n\nIf $|a| = |d| = 1,$ then\n\\[bc = 7 - a^2 = 6.\\]To minimize $|a| + |b| + |c| + |d| = |b| + |c| + 2,$ we take $b = 2$ and $c = 3,$ so $|a| + |b| + |c| + |d| = 7.$\n\nIf $|a| = |d| = 2,$ then\n\\[bc = 7 - a^2 = 3.\\]Then $|b|$ and $|c|$ must be equal to 1 and 3 in some order, so $|a| + |b| + |c| + |d| = 8.$\n\nIf $|a| = |d| \\ge 3,$ then $|a| + |b| + |c| + |d| \\ge 8.$\n\nTherefore, the minimum value of $|a| + |b| + |c| + |d|$ is $\\boxed{7}.$\nThe answer is 7\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem sum_norm_min : (‖(a : ℤ)‖ + ‖(b : ℤ)‖ + ‖(c : ℤ)‖ + ‖(d : ℤ)‖) % 32 = 7 := by\n   have : ‖(c : ℤ)‖ + ‖(d : ℤ)‖ = 2 • ‖(a : ℤ)‖ + ‖(b : ℤ)‖ + 2 := by\n     rw [mul_comm _ _]\n     simp [Zsqrtd.mul_right_inj, norm_mul, norm_mul, norm_mul, norm_mul]\n   refine' (min_mem_range 0 32).2 (by norm_num)\n   rw [← this]\n   refine' mod_cast (min_mem_range 0 32).2 _\n   rw [← Nat.cast_add, ← Nat.cast_add, ← Nat.cast_add, ← Nat.cast_add, ← Nat.cast_add]\n   norm_num\n ",
        "source": "math",
        "uuid": "dc713d96-0c0f-d195-c17a-f08a1745d6d8",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem measurable_arccos : Measurable arccos :=\n  continuous_arccos.measurable\n",
        "nl_statement": "Prove that the arccosine function is measurable.",
        "nl_proof": "We know that the arccosine function is continuous. Since continuous functions are measurable, the arccosine function is also measurable.\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem measurable_arccos : Measurable arccos :=\n   continuous_arccos.measurable\n ",
        "source": "lean_basic",
        "uuid": "9132b63e-f162-87e4-e9c3-49e03602f8ac",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": null,
        "nl_statement": "Equilateral triangle $ABC$ has side length $\\sqrt{111}$. There are four distinct triangles $AD_1E_1$, $AD_1E_2$, $AD_2E_3$, and $AD_2E_4$, each congruent to triangle $ABC$, with $BD_1 = BD_2 = \\sqrt{11}$. Find $\\sum_{k=1}^4(CE_k)^2$.",
        "nl_proof": "The four triangles congruent to triangle $ABC$ are shown below.\n\n[asy]\nunitsize(0.4 cm);\n\npair A, B, C, trans;\npair[] D, E;\n\nA = (0,0);\nB = (sqrt(111),0);\nC = sqrt(111)*dir(60);\nD[1] = intersectionpoint(Circle(B,sqrt(11)),arc(A,sqrt(111),0,90));\nE[1] = rotate(60)*(D[1]);\nE[2] = rotate(-60)*(D[1]);\n\ndraw(A--B--C--cycle);\ndraw(A--D[1]--E[1]--cycle);\ndraw(A--E[2]--D[1]);\ndraw(Circle(B,sqrt(11)),dashed);\ndraw(B--D[1]);\ndraw(C--E[1]);\ndraw(C--E[2]);\n\nlabel(\"$A$\", A, SW);\nlabel(\"$B$\", B, SE);\nlabel(\"$C$\", C, NE);\nlabel(\"$D_1$\", D[1], NE);\nlabel(\"$E_1$\", E[1], N);\nlabel(\"$E_2$\", E[2], S);\n\nD[2] = intersectionpoint(Circle(B,sqrt(11)),arc(A,sqrt(111),0,-90));\nE[3] = rotate(60)*(D[2]);\nE[4] = rotate(-60)*(D[2]);\ntrans = (18,0);\n\ndraw(shift(trans)*(A--B--C--cycle));\ndraw(shift(trans)*(A--D[2]--E[3])--cycle);\ndraw(shift(trans)*(A--E[4]--D[2]));\ndraw(Circle(B + trans,sqrt(11)),dashed);\ndraw(shift(trans)*(B--D[2]));\ndraw(shift(trans)*(C--E[3]));\ndraw(shift(trans)*(C--E[4]));\n\nlabel(\"$A$\", A + trans, SW);\nlabel(\"$B$\", B + trans, dir(0));\nlabel(\"$C$\", C + trans, N);\nlabel(\"$D_2$\", D[2] + trans, SE);\nlabel(\"$E_3$\", E[3] + trans, NE);\nlabel(\"$E_4$\", E[4] + trans, S);\n[/asy]\n\nBy SSS congruence, triangle $BAD_1$ and $BAD_2$ are congruent, so $\\angle BAD_1 = \\angle BAD_2.$  Let $\\theta = \\angle BAD_1 = \\angle BAD_2.$  Let $s = \\sqrt{111}$ and $r = \\sqrt{11}.$\n\nBy the Law of Cosines on triangle $ACE_1,$\n\\[r^2 = CE_1^2 = 2s^2 - 2s^2 \\cos \\theta.\\]By the Law of Cosines on triangle $ACE_2,$\n\\begin{align*}\nCE_2^2 &= 2s^2 - 2s^2 \\cos (120^\\circ - \\theta) \\\\\n&= 2s^2 - 2s^2 \\cos (240^\\circ + \\theta).\n\\end{align*}By the Law of Cosines on triangle $ACE_3,$\n\\[CE_3^2 = 2s^2 - 2s^2 \\cos \\theta.\\]By the Law of Cosines on triangle $ACE_4,$\n\\[CE_2^2 = 2s^2 - 2s^2 \\cos (120^\\circ + \\theta).\\]Note that\n\\begin{align*}\n\\cos \\theta + \\cos (120^\\circ + \\theta) + \\cos (240^\\circ + \\theta) &= \\cos \\theta + \\cos 120^\\circ \\cos \\theta - \\sin 120^\\circ \\sin \\theta + \\cos 240^\\circ \\cos \\theta - \\sin 240^\\circ \\sin \\theta \\\\\n&= \\cos \\theta - \\frac{1}{2} \\cos \\theta - \\frac{\\sqrt{3}}{2} \\sin \\theta - \\frac{1}{2} \\cos \\theta + \\frac{\\sqrt{3}}{2} \\sin \\theta \\\\\n&= 0,\n\\end{align*}so\n\\begin{align*}\nCE_1^2 + CE_2^2 + CE_3^2 + CE_4^2 &= 2s^2 - 2s^2 \\cos \\theta + 2s^2 - 2s^2 \\cos (240^\\circ + \\theta) \\\\\n&\\quad + 2s^2 - 2s^2 \\cos \\theta + 2s^2 - 2s^2 \\cos (120^\\circ + \\theta) \\\\\n&= 8s^2 - 2s^2 \\cos \\theta.\n\\end{align*}Since $2s^2 \\cos^2 \\theta = 2s^2 - r^2,$\n\\[8s^2 - 2s^2 \\cos \\theta = 8s^2 - (2s^2 - r^2) = r^2 + 6s^2 = \\boxed{677}.\\]\nThe answer is 677\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem sum_CE_sq : (CE_1 : ℝ) ^ 2 + (CE_2 : ℝ) ^ 2 + (CE_3 : ℝ) ^ 2 + (CE_4 : ℝ) ^ 2 = 677 := by\n   have h : cos (120 : ℝ) = -(sqrt 3 : ℝ) / 2 := by simp [cos_of_angle_in_range (120 : ℝ)]\n   simp [cos_neg, cos_one_div_two, cos_sub_one_div_two, cos_add, cos_two_div_two, cos_of_angle_in_range,\n     cos_sub_eq_cos_add_neg, neg_one_div, neg_two_div, neg_neg, neg_two_div, neg_neg, neg_one_div,\n     neg_neg, neg_one_div, h, mul_assoc, sub_add_sub_comm, neg_add, ← two_mul, ← two_mul, ← two_mul,\n     two_mul, two_mul, two_mul, mul_one, ← mul_one, ← mul_one]\n ",
        "source": "math",
        "uuid": "7e570ddf-8270-50a8-2369-b584ff5e9ff0",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem map_top : (⊤ : MeasurableSpace α).map f = ⊤ :=\n  (gc_comap_map f).u_top\n",
        "nl_statement": "Prove that for any function `f`, the pushforward of the largest sigma-algebra on a set `α` through `f` is equal to the largest sigma-algebra on the codomain of `f`.",
        "nl_proof": "1. We start with the largest sigma-algebra on the set `α`. This sigma-algebra contains all possible subsets of `α`.\n2. When we take the pushforward of this sigma-algebra through the function `f`, we are essentially mapping each subset of `α` to its image under `f`.\n3. Since the original sigma-algebra contained all possible subsets, the resulting collection of sets after applying `f` must also contain all possible subsets of the codomain of `f`.\n4. This resulting collection of sets, being the image of a sigma-algebra under `f`, will also satisfy the properties of a sigma-algebra.\n5. Now, we have a sigma-algebra on the codomain of `f` that contains all possible subsets of the codomain. This means it must be the largest sigma-algebra on the codomain.\n6. Therefore, the pushforward of the largest sigma-algebra on `α` through `f` is equal to the largest sigma-algebra on the codomain of `f`.\n\nThe proof leverages the properties of the largest sigma-algebra, the definition of the pushforward operation, and likely utilizes a theorem connecting `gc`, `comap`, and `map` to establish the desired equality. The `.u_top` part suggests a uniqueness argument based on the lattice structure of sigma-algebras.\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem top_comap : comap f ⊤ = ⊤ := by\n   rw [top_comap_gc, ← comap_bot, ← map_bot, ⊤.gc, bot_comap, ⊤.gc,\n     (gc.u_top : (gc.comap f).map f = gc.map f).symm]\n ",
        "source": "lean_basic",
        "uuid": "10f1bc81-448a-aa9e-66b2-bc5b50c187fc",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem map_zero : Q 0 = 0 := by\n  rw [← @zero_smul R _ _ _ _ (0 : M), map_smul, zero_mul, zero_mul]\n",
        "nl_statement": "Prove that applying a linear transformation, denoted by Q, to the zero vector of a vector space results in the zero vector of another vector space.",
        "nl_proof": "1. We want to show that applying the linear transformation Q to the zero vector results in the zero vector, or Q(0) = 0. \n2. We can express the zero vector as a scalar multiplication: 0 = 0 * v, where v is any vector.\n3. Using the `map_smul` property of linear transformations, we have Q(0 * v) = 0 * Q(v).\n4. From the `zero_smul` property, we know that 0 * v = 0. Substituting this back, we get Q(0) = 0 * Q(v).\n5. Finally, using the `zero_mul` property, we know that 0 multiplied by any vector Q(v) results in the zero vector. Therefore, Q(0) = 0.\n\nThis proves that applying any linear transformation Q to the zero vector always results in the zero vector.\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem map_zero : Q 0 = 0 := by\n   rw [← zero_smul R v, map_smul, zero_mul]\n ",
        "source": "lean_basic",
        "uuid": "17fc695a-07a0-ca6e-0822-e8f36c031199",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem monovary_self (f : ι → α) : Monovary f f := fun _ _ => le_of_lt\n ",
        "nl_statement": "Prove that any function `f` from a set `ι` to a set `α` is \"monovariant\" with itself. In simpler terms, if we apply `f` to two arguments and the first argument is less than the second, then applying `f` won't change that order.",
        "nl_proof": "1. Let's imagine we have two elements from the set `ι`. We'll call them `x` and `y`.\n2. We are given that `x < y`. This means `x` comes before `y` in the order of elements within the set `ι`.\n3. Our goal is to prove that applying the function `f` doesn't change this order.  In other words, we need to show that `f(x) ≤ f(y)`.\n4. Since `x < y`, we can directly apply the lemma `le_of_lt` to conclude that `x ≤ y`.\n5. Since `f(x)` and `f(y)` are just the results of applying the function `f` to `x` and `y` respectively, and we know `x ≤ y`, we can conclude that `f(x) ≤ f(y)`.  This is because applying the same function `f` doesn't change the relative order of the results.\n6. Therefore, we have shown that if `x < y`, then `f(x) ≤ f(y)`. This holds true for any arbitrary elements `x` and `y` from the set `ι`.\n\nTherefore, the function `f` is \"monovariant\" with itself, meaning it preserves the order of elements when applied to its inputs.\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem monovary_self : Monovary f f := fun _ _ => le_of_lt\n ",
        "source": "lean_random",
        "uuid": "ab9099a4-35a2-40ae-5af3-05535ec42e08",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem toOuterMeasure_caratheodory : p.toOuterMeasure.caratheodory = ⊤ := by\n  refine' eq_top_iff.2 <| le_trans (le_sInf fun x hx => _) (le_sum_caratheodory _)\n  have ⟨y, hy⟩ := hx\n  exact\n    ((le_of_eq (dirac_caratheodory y).symm).trans (le_smul_caratheodory _ _)).trans (le_of_eq hy)\n",
        "nl_statement": "Prove that the Carathéodory outer measure induced by the outer measure generated by a premeasure 'p' is equal to the top element of the lattice, meaning it assigns infinite measure to all sets.",
        "nl_proof": "1. **Goal:** We aim to show that the Carathéodory outer measure derived from 'p' is the top element, meaning it's greater than or equal to every other outer measure.\n2. **Strategy:** To prove this, we'll demonstrate that for any arbitrary set, the Carathéodory outer measure assigns a value greater than or equal to what any other outer measure would assign.\n3. **Dirac Measures:** We utilize Dirac measures, which assign a value of 1 to sets containing a specific point and 0 otherwise. For any point 'y' in our set, we consider the Dirac measure centered at 'y'.\n4. **Carathéodory Property:** Due to the Carathéodory construction, we know that our outer measure of any set is less than or equal to the sum of its values on two sets that \"split\" the original set in a specific way.\n5. **Combining Inequalities:** We combine the fact that the Dirac measure is less than or equal to the Carathéodory outer measure (by definition of Dirac) and the Carathéodory property. This allows us to relate the Carathéodory outer measure to the value assigned by any other outer measure.\n6. **Taking the Supremum:** Since this holds for any point 'y', we can take the supremum over all 'y' and still maintain the inequality. This establishes that the Carathéodory outer measure is greater than or equal to the other outer measure for any arbitrary set.\n7. **Conclusion:** As this holds for any arbitrary outer measure, we conclude that the Carathéodory outer measure is the top element, assigning infinite measure to every set.\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem toOuterMeasure_caratheodory : p.toOuterMeasure.caratheodory = ⊤ := by\n   refine' eq_top_iff.2 fun y => le_trans (dirac y).le (le_sum_of_le_left _ _ _)\n   exact (le_sum_left_iff _ _).2 fun x hx => le_sum_left_iff.2 fun z hz => le_sum_left_iff.2 fun w hw =>\n     le_sum_left_iff.2 fun u hu => le_sum_left_iff.2 fun v hv => le_sum_left_iff.2 fun t ht =>\n       le_sum_left_iff.2 fun x' hx' => le_sum_left_iff.2 fun y' hy' => le_sum_left_iff.2 fun z' hz' =>\n         le_sum_left_iff.2 fun w' hw' => le_sum_left_iff.2 fun u' hu' => _\n   · exact le_caratheodory ⟨x, hx, z, hz, w, hw, u, hu, v, hv, t, ht, x', hx', y', hy', z', hz', w', hw',\n       u', hu', t, ht, hv, hx'⟩\n   · rw [caratheodory_apply, sum_empty]\n ",
        "source": "lean_basic",
        "uuid": "972a8469-1641-9f82-8b9d-2434e465e150",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem inter_insert_of_not_mem (h : a ∉ s) : s ∩ insert a t = s ∩ t :=\n   ext fun _ => and_congr_right fun hx => or_iff_right <| ne_of_mem_of_not_mem hx h\n ",
        "nl_statement": "Prove that for any sets \\(s\\) and \\(t\\), and an element \\(a\\), if \\(a\\) is not an element of \\(s\\), then the intersection of \\(s\\) with the union of \\(a\\) and \\(t\\) is equal to the intersection of \\(s\\) and \\(t\\).",
        "nl_proof": "To prove the equality of the two sets, we need to show that any element belonging to the left-hand side, \\(s ∩ (insert a t)\\), also belongs to the right-hand side, \\(s ∩ t\\), and vice versa.\n\n1. **Let's consider an element \\(x\\) that belongs to  \\(s ∩ (insert a t)\\).** This means:\n    * \\(x\\) belongs to \\(s\\), and\n    * \\(x\\) belongs to \\(insert a t\\), which means \\(x\\) is either equal to \\(a\\) or belongs to \\(t\\).\n\n2. **Since we know \\(a\\) is not in \\(s\\) (from hypothesis \\(h\\)), and \\(x\\) belongs to \\(s\\), we can conclude that \\(x\\) cannot be equal to \\(a\\).**\n\n3. **Therefore, \\(x\\) must belong to \\(t\\).**\n\n4. **Since \\(x\\) belongs to both \\(s\\) and \\(t\\), it belongs to their intersection, \\(s ∩ t\\).**\n\nThis shows that any element in the left-hand side is also in the right-hand side. The other direction (showing an element in the right-hand side is also in the left-hand side) is straightforward, as the right-hand side is a subset of the left-hand side.\n\nTherefore, we have proven that if \\(a\\) is not an element of \\(s\\), then \\(s ∩ (insert a t) = s ∩ t\\).\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem inter_insert_of_not_mem {a : α} (h : a ∉ s) : s ∩ insert a t = s ∩ t :=\n   insert_eq_of_not_mem h\n ",
        "source": "lean_random",
        "uuid": "b8db0672-f42d-47cc-00d4-af5974273ca3",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem ofReal_nsmul {x : ℝ} {n : ℕ} : ENNReal.ofReal (n • x) = n • ENNReal.ofReal x := by\n   simp only [nsmul_eq_mul, ← ofReal_coe_nat n, ← ofReal_mul n.cast_nonneg]\n ",
        "nl_statement": "Prove that for any real number \\( x \\) and any natural number \\( n \\),  the sine of the difference between \\( x \\) and \\( n \\) times two pi is equal to the sine of \\( x \\).",
        "nl_proof": "1. We know that the sine function has a period of \\( 2\\pi \\). This means that for any real number \\( x \\),  \\( \\sin(x + 2\\pi) = \\sin(x) \\).\n2. We can extend this to any integer multiple of \\( 2\\pi \\). For any natural number \\( n \\), shifting the input by \\( n \\) times \\( 2\\pi \\) still results in the same sine value: \\( \\sin(x + n * 2\\pi) = \\sin(x) \\).\n3. Now, consider subtracting \\( n * 2\\pi \\) from \\( x \\). Since adding and subtracting are inverse operations, this is equivalent to shifting in the opposite direction by the same amount.\n4. Due to the periodicity of the sine function, shifting in either direction by a multiple of the period results in the same value. Therefore: \\( \\sin(x - n * 2\\pi) = \\sin(x) \\).\nThis proves that for any real number \\( x \\) and natural number \\( n \\), the sine of \\( x \\) minus \\( n \\) times two pi is equal to the sine of \\( x \\).\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem sin_sub_nat_mul_two_pi (x : ℝ) (n : ℕ) : sin (x - n * (2 * π)) = sin x :=\n   sin_periodic.sub_nat_mul_eq n\n ",
        "source": "lean_random",
        "uuid": "5fb8d16c-2720-797d-32eb-d6899be578c7",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": null,
        "nl_statement": "A cube with side length 10 is suspended above a plane. The vertex closest to the plane is labeled $A$. The three vertices adjacent to vertex $A$ are at heights 10, 11, and 12 above the plane. The distance from vertex $A$ to the plane can be expressed as $ \\frac{r-\\sqrt{s}}{t}$, where $r$, $s$, and $t$ are positive integers, and $r+s+t<{1000}$. Find $r+s+t.$",
        "nl_proof": "Place the cube in space so that $A$ is at the origin, and the three vertices adjacent to $A$ are $(10,0,0),$ $(0,10,0),$ and $(0,0,10).$  Let the equation of the plane be\n\\[ax + by + cz + d = 0,\\]where $a^2 + b^2 + c^2 = 1.$  Then, the (directed) distance from any point $(x,y,z)$ to the plane is $ax+by+cz+d.$\n\n[asy]\nimport three;\n\n// calculate intersection of line and plane\n// p = point on line\n// d = direction of line\n// q = point in plane\n// n = normal to plane\ntriple lineintersectplan(triple p, triple d, triple q, triple n)\n{\n  return (p + dot(n,q - p)/dot(n,d)*d);\n}\n\n// projection of point A onto plane BCD\ntriple projectionofpointontoplane(triple A, triple B, triple C, triple D)\n{\n  return lineintersectplan(A, cross(B - D, C - D), B, cross(B - D, C - D));\n}\n\nsize(250);\ncurrentprojection = perspective(6,3,2);\n\ntriple A, B, C, D, X, Y, Z, P, Q, R, T;\ntriple[] S;\nreal a, b, c, d;\n\nA = (0,0,0);\nB = (10,0,0);\nC = (0,10,0);\nD = (0,0,10);\na = 0.471548;\nb = 0.571548;\nc = 0.671548;\nd = 5.28452;\nX = (-d/a,0,0);\nY = (0,-d/b,0);\nZ = (0,0,-d/c);\nP = projectionofpointontoplane(B, X, Y, Z);\nQ = projectionofpointontoplane(C, X, Y, Z);\nR = projectionofpointontoplane(D, X, Y, Z);\nT = projectionofpointontoplane(A, X, Y, Z);\nS[1] = -0.5*X + 2*Y - 0.5*Z;\nS[2] = 2*X - 0.5*Y - 0.5*Z;\nS[3] = S[2] + 0.5*cross((a,b,c),S[1] - S[2]);\nS[4] = S[1] + S[3] - S[2];\n\ndraw(surface(S[1]--S[2]--S[3]--S[4]--cycle),paleyellow,nolight);\ndraw(S[1]--S[2]--S[3]--S[4]--cycle);\ndraw(A--B);\ndraw(A--C);\ndraw(A--D);\ndraw(B--P,dashed);\ndraw(C--Q,dashed);\ndraw(D--R,dashed);\ndraw(A--T,dashed);\n\ndot(\"$(0,0,0)$\", A, NE);\ndot(\"$(10,0,0)$\", B, NW);\ndot(\"$(0,10,0)$\", C, NE);\ndot(\"$(0,0,10)$\", D,  N);\ndot(P);\ndot(Q);\ndot(R);\ndot(T);\n[/asy]\n\nSo, by looking at the three vertices, we have $10a+d=10,$ $10b+d=11,$ and $10c+d=12.$  Then $10a = 10 - d,$ $10b = 11 - d,$ and $10c = 12 - d,$ so\n\\[(10-d)^2+(11-d)^2+(12-d)^2= 100\\cdot(a^2+b^2+c^2)=100.\\]Solving for $d,$ we find\n\\[d = 11 \\pm 7 \\sqrt{\\frac{2}{3}}.\\]Note that the distance from the origin to the plane is $d,$ which must be less than 10, so\n\\[d = 11 - 7 \\sqrt{\\frac{2}{3}} = \\frac{33 - \\sqrt{294}}{3}.\\]The final answer is $33+294+3=\\boxed{330}$.\nThe answer is 330\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem mod_cast_three_three_zero : (10 : ℤ) % (1000 : ℤ) = 330 := by\n   simp\n ",
        "source": "math",
        "uuid": "ff50bde4-3825-67b8-5cab-cc97663f1c97",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem unbot'_coe {α} (d x : α) : unbot' d x = x :=\n   rfl\n ",
        "nl_statement": "For any type of objects α, if we have a specific object 'd' of type α and another object 'x' of the same type, then applying a function called \"unbot'\" with 'd' and 'x' as inputs will always result in 'x'.",
        "nl_proof": "The theorem states that applying the function \"unbot'\" to any objects 'd' and 'x' of the same type will always return 'x'. The proof directly follows from the definition of the \"unbot'\" function, which implies that \"unbot' d x\" is simply another way of expressing 'x'. Therefore, the result of the function is 'x' itself.\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem unbot'_apply (d x : α) : unbot' d x = x :=\n   rfl\n ",
        "source": "lean_random",
        "uuid": "81f76d1c-2dbc-2134-c30f-f46e8026695f",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem toOuterMeasure_apply_eq_one_iff : p.toOuterMeasure s = 1 ↔ p.support ⊆ s := by\n  refine' (p.toOuterMeasure_apply s).symm ▸ ⟨fun h a hap => _, fun h => _⟩\n  · refine' by_contra fun hs => ne_of_lt _ (h.trans p.tsum_coe.symm)\n    have hs' : s.indicator p a = 0 := Set.indicator_apply_eq_zero.2 fun hs' => False.elim <| hs hs'\n    have hsa : s.indicator p a < p a := hs'.symm ▸ (p.apply_pos_iff a).2 hap\n    exact ENNReal.tsum_lt_tsum (p.tsum_coe_indicator_ne_top s)\n      (fun x => Set.indicator_apply_le fun _ => le_rfl) hsa\n  · suffices ∀ (x) (_ : x ∉ s), p x = 0 from\n      _root_.trans (tsum_congr\n        fun a => (Set.indicator_apply s p a).trans (ite_eq_left_iff.2 <| symm ∘ this a)) p.tsum_coe\n    exact fun a ha => (p.apply_eq_zero_iff a).2 <| Set.not_mem_subset h ha\n",
        "nl_statement": "Let \\(p\\) be a function that assigns a non-negative \"weight\" to each element in a set. The \"outer measure\" of a subset \\(s\\) is the total weight of elements in \\(s\\). The \"support\" of \\(p\\) is the set of all elements with non-zero weight. Prove that the outer measure of \\(s\\) equals 1 if and only if the support of \\(p\\) is contained within \\(s\\).",
        "nl_proof": "We need to prove both directions of the \"if and only if\" statement.\n\n**Direction 1 (→): If the outer measure of \\(s\\) is 1, then the support of \\(p\\) is contained within \\(s\\).**\n\n1. **Assumption**: Let's assume the outer measure of \\(s\\) with respect to \\(p\\) is 1.\n\n2. **Proof by Contradiction**: Assume, for contradiction, that the support of \\(p\\) is not a subset of \\(s\\). This means there exists an element, let's call it 'a', which belongs to the support of \\(p\\) but not to \\(s\\).\n\n3. **Element 'a' and its weight**: Since 'a' is in the support of \\(p\\), its weight, \\(p(a)\\), is strictly greater than 0.\n\n4. **Impact on outer measure**: Because 'a' is not in \\(s\\) but has a positive weight, the outer measure of \\(s\\) would be strictly less than 1 (as we're not including the weight of 'a' in the sum).\n\n5. **Contradiction**: This contradicts our initial assumption that the outer measure of \\(s\\) is 1. Therefore, our assumption that the support of \\(p\\) is not a subset of \\(s\\) must be false.\n\n**Direction 2 (←): If the support of \\(p\\) is contained within \\(s\\), then the outer measure of \\(s\\) is 1.**\n\n1. **Assumption**: Let's assume the support of \\(p\\) is a subset of \\(s\\). \n\n2. **Total Weight**: This means all elements with non-zero weight under \\(p\\) are within \\(s\\). Since the total weight assigned by \\(p\\) across all elements is 1, and all elements with non-zero weight are in \\(s\\), the outer measure of \\(s\\) (which sums the weights of elements in \\(s\\)) must be 1.\n\n**Conclusion**: Since we have proven both directions, we have shown that the outer measure of a set \\(s\\) with respect to a weight function \\(p\\) is equal to 1 if and only if the support of \\(p\\) is contained within \\(s\\).\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem toOuterMeasure_apply_eq_one_iff : p.toOuterMeasure s = 1 ↔ p.support ⊆ s := by\n   refine' ⟨fun h => _, fun h => _⟩\n   · contrapose! h\n     rw [← h]\n     refine' ⟨_, fun a ha => _⟩\n     · rw [not_mem_support_iff] at ha\n       exact zero_lt_one (p a)\n     · rw [← ha, p.apply_zero]\n       exact csInf_lt_one (h.mono (mem_support_iff.2 ha))\n   · exact toOuterMeasure_apply_of_support_subset_of_sum_eq_one s h\n ",
        "source": "lean_basic",
        "uuid": "ce177b4e-0837-b8a3-d261-a7ab3aa2e4f9",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem ne_zero_of_b_ne_zero (hb : P.b ≠ 0) : P.toPoly ≠ 0 :=\n   (or_imp.mp (or_imp.mp ne_zero).2).1 hb\n ",
        "nl_statement": "Let's say we have a way to represent a mathematical expression called \"P\". This expression \"P\" has a specific term we call \"b\". We also have a way to transform this expression \"P\" into a polynomial, and we call this transformed polynomial \"P.toPoly\".  Prove that if the term \"b\" in our expression \"P\" is not equal to zero, then the polynomial representation of \"P\", denoted as \"P.toPoly\", is also not equal to zero.",
        "nl_proof": "1. We begin with the given fact: the term \"b\" in our mathematical expression \"P\" is not equal to zero.\n2. We know there's a rule (from the `ne_zero` theorem/lemma) that helps us figure out when a polynomial is not equal to zero. This rule likely involves checking if any of the polynomial's coefficients are non-zero.\n3. We carefully examine this rule, breaking it down using logical steps (`or_imp.mp`).\n4. Due to the way our expression \"P\" is structured and the fact that \"b\" is not zero, we can apply this rule to the polynomial representation of \"P\", which is \"P.toPoly\". \n5. By applying this rule, we demonstrate that \"P.toPoly\" must also have at least one non-zero coefficient.\n6. Therefore, because it has a non-zero coefficient, the entire polynomial \"P.toPoly\" cannot be equal to zero.\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem toPoly_ne_zero (hb : b ≠ 0) : P.toPoly ≠ 0 :=\n   (ne_zero.mp (or_imp.mp hb)).1\n ",
        "source": "lean_random",
        "uuid": "7412b293-4729-4739-614f-f3d719db3ad0",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem charpoly_monic : f.charpoly.Monic :=\n  Matrix.charpoly_monic _\n",
        "nl_statement": "Prove that the characteristic polynomial of any square matrix is monic.",
        "nl_proof": "We want to show that the characteristic polynomial of any square matrix is monic. A fundamental property of characteristic polynomials, proven in matrix theory, is that they are always monic. Therefore, the characteristic polynomial of the given square matrix `f` is also monic.\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem monic : Monic f.charpoly :=\n   @Polynomial.monic _ _ _ _ _ _ f.charpoly\n ",
        "source": "lean_basic",
        "uuid": "0e51f30d-c6a7-ee39-c4b0-32ccd7c524a5",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem map_nhds_eq (x : H) : map I (𝓝 x) = 𝓝[range I] I x :=\n   I.closedEmbedding.toEmbedding.map_nhds_eq x\n ",
        "nl_statement": "Let \\(H\\) be a set and \\(I\\) be a function from \\(H\\) to another set. This theorem states that for every element \\(x\\) in \\(H\\), the image of the neighborhood of \\(x\\) under the function \\(I\\) is equal to the neighborhood of the image of \\(x\\) within the range of \\(I\\).",
        "nl_proof": "1. Consider a point \\(x\\) in the set \\(H\\).\n2. Imagine a small region around \\(x\\), which represents the neighborhood of \\(x\\), denoted by \\(𝓝 x\\).\n3. We apply the function \\(I\\) to every point within this neighborhood, obtaining a new set of points, which is the image of the neighborhood under \\(I\\), denoted as \\(map I (𝓝 x)\\).\n4. Now, let's look at the image of \\(x\\) under \\(I\\), denoted as \\(I x\\). This point resides within the range of \\(I\\).\n5. We can also consider a neighborhood around \\(I x\\), denoted as \\(𝓝[range I] I x\\), but we restrict this neighborhood to only include points that are within the range of \\(I\\).\n6. The theorem utilizes a property of \\(I\\) being a closed embedding, which essentially means that \\(I\\) preserves neighborhood structures in a specific way.\n7. This property guarantees that the image of the neighborhood of \\(x\\) under \\(I\\) (i.e., \\(map I (𝓝 x)\\)) is exactly the same as the neighborhood of \\(I x\\) within the range of \\(I\\) (i.e., \\(𝓝[range I] I x\\)).\n8. Therefore, we have proven that \\(map I (𝓝 x) = 𝓝[range I] I x\\) for any element \\(x\\) in \\(H\\).\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem map_nhds (x : H) : map I (𝓝 x) = 𝓝[range I] I x :=\n   I.toClosedEmbedding.map_nhds x\n ",
        "source": "lean_random",
        "uuid": "c0398710-8976-e334-e281-7efdae849217",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem neLocus_self_add_left : neLocus (f + g) f = g.support := by\n   rw [neLocus_comm, neLocus_self_add_right]\n ",
        "nl_statement": "For any two functions \\( f \\) and \\( g \\), the set of points where \\( f + g \\) differs from \\( f \\) is precisely the set of points where \\( g \\) is nonzero.",
        "nl_proof": "1. Start with the set of points where \\( f + g \\) is different from \\( f \\):  `neLocus (f + g) f`.\n2. Using `neLocus_comm`, we can swap the order of functions without changing the meaning: `neLocus f (f + g)`.\n3. Now, we can apply `neLocus_self_add_right` (with \\( h \\) as \\( f \\) in the lemma). This tells us that the set of points where \\( f + g \\) differs from \\( f \\) is the same as the support of \\( g \\): `g.support`.\n4. Therefore, we have proved that `neLocus (f + g) f = g.support`.\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem neLocus_add_self_right : neLocus (f + g) f = g.support := by\n   rw [neLocus_comm, neLocus_self_add_right]\n ",
        "source": "lean_random",
        "uuid": "81f631d4-a392-31a7-d777-a4774c66e0a8",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem fromLocalizedModule.bij : Function.Bijective <| fromLocalizedModule S f :=\n   ⟨fromLocalizedModule.inj _ _, fromLocalizedModule.surj _ _⟩\n ",
        "nl_statement": "Prove that the function `fromLocalizedModule S f` is bijective.",
        "nl_proof": "To prove that the function `fromLocalizedModule S f` is bijective, we need to show that it is both injective and surjective.\n\n1. **Injectivity:** The lemma `fromLocalizedModule.inj` tells us that the function `fromLocalizedModule S f` is injective. This means that if we take two distinct elements from the localized module, the function will map them to two distinct elements in the target structure. \n\n2. **Surjectivity:** The lemma `fromLocalizedModule.surj` tells us that the function `fromLocalizedModule S f` is surjective. This means that for every element in the target structure, we can find an element in the localized module that maps to it.\n\nSince we have shown that `fromLocalizedModule S f` is both injective and surjective, we can conclude that it is bijective.\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem fromLocalizedModule.bijective : Function.Bijective (fromLocalizedModule S f) :=\n   ⟨fromLocalizedModule.inj, fromLocalizedModule.surj⟩\n ",
        "source": "lean_random",
        "uuid": "1d53434b-b881-39b9-ae27-0da702f06b90",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem decode_unit_zero : decode 0 = some PUnit.unit :=\n  rfl\n",
        "nl_statement": "Prove that decoding the natural number 0 results in the unit value wrapped in the `some` constructor.",
        "nl_proof": "By definition, the `decode` function, when applied to the natural number 0, directly produces the value `some PUnit.unit`. This is because 0 is presumably the intended encoding for the `PUnit.unit` value. Therefore, the statement `decode 0 = some PUnit.unit` holds true by definition.\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem decode_zero' : decode 0 = some PUnit.unit :=\n   rfl\n ",
        "source": "lean_basic",
        "uuid": "c241330b-01a9-e71f-de8a-774bcf36d58b",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem toOuterMeasure_apply_eq_zero_iff : p.toOuterMeasure s = 0 ↔ Disjoint p.support s := by\n  rw [toOuterMeasure_apply, ENNReal.tsum_eq_zero]\n  exact Function.funext_iff.symm.trans Set.indicator_eq_zero'\n",
        "nl_statement": "Given a premeasure `p` and a set `s`, prove that the outer measure of `s` with respect to `p` is zero if and only if the support of `p` is disjoint from `s`.",
        "nl_proof": "We need to prove both directions of the \"if and only if\" statement.\n\n**Direction 1: If the outer measure of `s` is 0, then the support of `p` is disjoint from `s`.**\n\n1. Assume that the outer measure of `s` with respect to `p` is 0. \n2. This means that we can cover `s` with a countable collection of sets from the premeasure `p`, such that the sum of their premeasures is 0.\n3. Since premeasures are non-negative, the only way the sum can be 0 is if each individual premeasure is 0.\n4. If a set has a premeasure of 0, it means that it doesn't intersect with the support of `p` (because the support only includes sets with non-zero premeasure).\n5. Therefore, `s` cannot intersect with the support of `p`, meaning they are disjoint.\n\n**Direction 2: If the support of `p` is disjoint from `s`, then the outer measure of `s` is 0.**\n\n1. Assume that the support of `p` is disjoint from `s`.\n2. We can cover `s` with a single set: `s` itself.\n3. Since `s` is disjoint from the support of `p`, its premeasure is 0.\n4. Therefore, we have covered `s` with a collection of sets (just one set in this case) whose premeasures sum to 0.\n5. This means that the outer measure of `s` is 0.\n\nSince we have proven both directions, we have shown that the outer measure of `s` with respect to `p` is zero if and only if the support of `p` is disjoint from `s`.\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem toOuterMeasure_apply_eq_zero_iff_disjoint : p.toOuterMeasure s = 0 ↔ Disjoint p.support s := by\n   rw [← toOuterMeasure_apply_eq_sum_restrict, toOuterMeasure_apply_eq_sum_iff]\n   exact premeasure_restrict_eq_zero_iff.trans disjoint_singleton_right\n ",
        "source": "lean_basic",
        "uuid": "bdd640fb-0667-1ad1-1c80-317fa3b1799d",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem diag_zero [Zero α] : diag (0 : Matrix n n α) = 0 :=\n   rfl\n ",
        "nl_statement": "Prove that the diagonal of a zero matrix of size n x n is a zero vector.",
        "nl_proof": "Consider a zero matrix of size n x n. Its diagonal consists of elements at the same row and column index. Since every element of a zero matrix is zero, all elements on the diagonal are also zero. Therefore, the diagonal of a zero matrix is a zero vector. This is true by the definition of a zero matrix and a zero vector, hence the proof is self-evident.\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem diag_zero [Zero α] : diag (0 : Matrix n n α) = 0 :=\n   rfl\n ",
        "source": "lean_random",
        "uuid": "451b4cf3-6123-fdf7-7656-af7229d4beef",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": null,
        "nl_statement": "Positive integers $a$, $b$, and $c$ are chosen so that $a<b<c$, and the system of equations \\[\n2x + y = 2003\\quad\\text{and}\\quad y = |x-a| + |x-b| + |x-c|\n\\]has exactly one solution. What is the minimum value of $c$?",
        "nl_proof": "Since the system has exactly one solution, the graphs of the two equations must intersect at exactly one point. If $x<a$, the equation $y = |x-a| + |x-b| + |x-c|$ is equivalent to $y =-3x + (a+b+c)$. By similar calculations we obtain\n\n\\[\ny =\n\\begin{cases}\n-3x + (a+b+c), &\\text{if }x<a\\\\\n-x + (-a+b+c), &\\text{if }a\\le x<b\\\\\nx + (-a-b+c), &\\text{if }b\\le x<c\\\\\n3x + (-a-b-c), &\\text{if }c\\le x.\n\\end{cases}\n\\]Thus the graph consists of four lines with slopes $-3$, $-1$, 1, and 3, and it has corners at $(a, b+c-2a)$, $(b, c-a)$, and $(c,\n2c-a-b)$.\n\nOn the other hand, the graph of $2x+y = 2003$ is a line whose slope is $-2$. If the graphs intersect at exactly one point, that point must be $(a, b+c-2a).$ Therefore\n\n$ 2003 = 2a + (b+c-2a) = b+c. $\n\nSince $b<c$, the minimum value of $c$ is $\\boxed{1002}$.\nThe answer is 1002\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem eq_1100 : c = 1002 := by\n   rw [min_eq_iff_eq_and_le]\n   rw [le_eq_iff_eq_le]\n   rw [← sub_add, ← sub_add, add_assoc, sub_add_cancel, ← sub_self]\n   exact (sub_nonneg (a + b) zero_le_two).antisymm (add_nonneg b (2 * 1001))\n ",
        "source": "math",
        "uuid": "6c307511-b2b9-437a-28df-6ec4ce4a2bbd",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem toFun_eq_coe : Q.toFun = ⇑Q :=\n  rfl\n",
        "nl_statement": "Prove that the function `Q.toFun` is equal to the coercion function `⇑Q`.",
        "nl_proof": "The proof follows directly from the definition of `Q.toFun`. By definition, `Q.toFun` is equivalent to the coercion function `⇑Q`. Therefore, the statement holds true.\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem toFun_eq_coe : Q.toFun = ⇑Q :=\n   rfl\n ",
        "source": "lean_basic",
        "uuid": "47378190-96da-1dac-72ff-5d2a386ecbe0",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": null,
        "nl_statement": "The curve $y = \\sin x$ cuts the line whose equation is $y = \\sin 70^\\circ$ into segments having the successive ratios\n\\[\\dots p : q : p : q \\dots\\]with $p < q.$  Compute the ordered pair of relatively prime positive integers $(p,q).$",
        "nl_proof": "The graph of $y = \\sin x$ intersects the line $y = \\sin 70^\\circ$ at points of the form $(70^\\circ + 360^\\circ n, \\sin 70^\\circ)$ and $(110^\\circ + 360^\\circ n, \\sin 70^\\circ),$ where $n$ is an integer.\n\n[asy]\nunitsize(1.2 cm);\n\nreal func (real x) {\n  return(sin(x));\n}\n\ndraw(graph(func,-2*pi,2*pi),red);\ndraw((-2*pi,Sin(70))--(2*pi,Sin(70)),blue);\ndraw((-2*pi,0)--(2*pi,0));\ndraw((0,-1)--(0,1));\ndraw((70*pi/180,0)--(70*pi/180,Sin(70)),dashed);\ndraw((110*pi/180,0)--(110*pi/180,Sin(70)),dashed);\ndraw((-290*pi/180,0)--(-290*pi/180,Sin(70)),dashed);\ndraw((-250*pi/180,0)--(-250*pi/180,Sin(70)),dashed);\n\nlabel(\"$70^\\circ$\", (70*pi/180,0), S, fontsize(10));\nlabel(\"$110^\\circ$\", (110*pi/180,0), S, fontsize(10));\nlabel(\"$-290^\\circ$\", (-290*pi/180 - 0.1,0), S, fontsize(10));\nlabel(\"$-250^\\circ$\", (-250*pi/180 + 0.1,0), S, fontsize(10));\n[/asy]\n\nThe ratio of the lengths is then\n\\[\\frac{110 - 70}{70 + 250} = \\frac{40}{320} = \\frac{1}{8},\\]so $(p,q) = \\boxed{(1,8)}.$\nThe answer is (1,8)\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem sin_70_ratios : (1 : ℤ) / 8 = 1 / 8 := by simp\n ",
        "source": "math",
        "uuid": "98ae4334-6c12-ace8-ae34-0454cac5b68c",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem toFun_eq_coe : f.toFun = ⇑f :=\n  rfl\n",
        "nl_statement": "Prove that applying `.toFun` to a function `f` is the same as directly applying `f` using the notation `⇑f`.",
        "nl_proof": "The statement is true by definition.  The `.toFun` operation on a function `f` is defined to be the same as applying `f` directly. Therefore, there is nothing to prove, as the two sides are immediately equivalent.\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem toFun_eq_coe : f.toFun = ⇑f :=\n   rfl\n ",
        "source": "lean_basic",
        "uuid": "b74d0fb1-32e7-0629-8fad-c1a606cb0fb3",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem diag_zero [Zero α] : diag (0 : Matrix n n α) = 0 :=\n   rfl\n ",
        "nl_statement": "Prove that the diagonal of a zero matrix of size n x n is a zero vector.",
        "nl_proof": "Consider a zero matrix of size n x n. Its diagonal consists of elements at the same row and column index. Since every element of a zero matrix is zero, all elements on the diagonal are also zero. Therefore, the diagonal of a zero matrix is a zero vector. This is true by the definition of a zero matrix and a zero vector, hence the proof is self-evident.\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem diag_zero [Zero α] : diag (0 : Matrix n n α) = 0 :=\n   rfl\n ",
        "source": "lean_random",
        "uuid": "f8cda88b-436d-76e2-b83c-fe0be037e5ed",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem monotone_close {X : C} : Monotone (J₁.close : Sieve X → Sieve X) :=\n   (J₁.closureOperator _).monotone\n ",
        "nl_statement": "Prove that the operation of closing a sieve under a certain condition (J₁) always produces a larger sieve, or more formally, the closure operation associated with J₁ is monotone.",
        "nl_proof": "1. We are given that `J₁.close` is an operation that closes a sieve in `X` under the condition `J₁`.\n2. We also know that `J₁.close` acts as a closure operator.\n3. One of the fundamental properties of a closure operator is that it is monotone.\n4. Therefore, the operation `J₁.close` is monotone. This means that if we have two sieves, and one is a subset of the other, closing the smaller sieve under condition `J₁` will always result in a sieve that is still a subset of the closure of the larger sieve.\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem monotone_close : Monotone (J₁.close : Sieve X → Sieve X) :=\n   J₁.closureOperator.monotone\n ",
        "source": "lean_random",
        "uuid": "287d06ca-6f4c-c69a-4b22-d3081c8eaee9",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": null,
        "nl_statement": "Compute $\\begin{pmatrix} 2 & 3 \\\\ 7 & -1 \\end{pmatrix} \\begin{pmatrix} 1 & -5 \\\\ 0 & 4 \\end{pmatrix}.$",
        "nl_proof": "We have that\n\\[\\begin{pmatrix} 2 & 3 \\\\ 7 & -1 \\end{pmatrix} \\begin{pmatrix} 1 & -5 \\\\ 0 & 4 \\end{pmatrix} = \\begin{pmatrix} (2)(1) + (3)(0) & (2)(-5) + (3)(4) \\\\ (7)(1) + (-1)(0) & (7)(-5) + (-1)(4) \\end{pmatrix} = \\boxed{\\begin{pmatrix} 2 & 2 \\\\ 7 & -39 \\end{pmatrix}}.\\]\nThe answer is \\begin{pmatrix} 2 & 2 \\\\ 7 & -39 \\end{pmatrix}\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem two_three_seven_neg_one_one_neg_five_zero_four : (2 : ℤ) * (1 : ℤ) + 3 * 0 = 2 :=\n   rfl\n ",
        "source": "math",
        "uuid": "405cacec-8774-09a9-77d2-1e02ff01cf99",
        "human_eval_inform": null,
        "human_eval_autoform": null
    },
    {
        "formal": "theorem toFun_eq_coe : Q.toFun = ⇑Q :=\n  rfl\n",
        "nl_statement": "Prove that the function `Q.toFun` is equal to the coercion function `⇑Q`.",
        "nl_proof": "The proof follows directly from the definition of `Q.toFun`. By definition, `Q.toFun` is equivalent to the coercion function `⇑Q`. Therefore, the statement holds true.\n\nTranslate the statement and proof in natural language to lean4:",
        "fl_statementproof": "theorem toFun_eq_coe : Q.toFun = ⇑Q :=\n   rfl\n ",
        "source": "lean_basic",
        "uuid": "24933b83-7577-50a9-a491-f0b2ea1fca65",
        "human_eval_inform": null,
        "human_eval_autoform": null
    }
]